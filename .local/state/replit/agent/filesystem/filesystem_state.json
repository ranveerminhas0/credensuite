{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# NGO ID Card Management System\n\n## Overview\n\nA full-stack web application for generating and managing NGO member ID cards. Built with React frontend and Express backend, this system allows NGOs to create, customize, and print professional identification cards for their members. The application features member management, card template customization, organization settings, and PDF export functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript using Vite for development\n- **UI Library**: Radix UI primitives with shadcn/ui components for consistent design\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **State Management**: TanStack Query for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Forms**: React Hook Form with Zod validation for type-safe form handling\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ESM modules\n- **Data Layer**: Drizzle ORM with PostgreSQL database (Neon Database serverless)\n- **File Handling**: Multer for image uploads with disk storage\n- **Development**: Hot module replacement with Vite middleware integration\n- **Session Management**: Express sessions with PostgreSQL store\n\n### Database Design\n- **Members Table**: Stores member information including personal details, contact info, joining date, and photo URLs\n- **NGO Settings Table**: Organization configuration including name, contact details, branding assets (logo, signature), and QR code patterns\n- **Card Templates Table**: Customizable card designs with color schemes, fonts, and layout options\n- **Schema Management**: Drizzle migrations for version-controlled database changes\n\n### API Architecture\n- **RESTful Design**: Standard HTTP methods for CRUD operations\n- **File Upload Support**: Multipart form data handling for member photos and organization assets\n- **Error Handling**: Centralized error middleware with consistent response format\n- **Request Logging**: Custom middleware for API request tracking and debugging\n\n### Authentication & Authorization\n- **Session-based**: Express sessions for user state management\n- **File Security**: Served uploads with proper access controls\n- **Input Validation**: Schema-based validation using Zod for all API endpoints\n\n### Card Generation System\n- **Template Engine**: Dynamic card generation with customizable templates\n- **PDF Export**: Browser-based PDF generation for printing\n- **Asset Management**: Organized file storage for member photos and organizational branding\n- **QR Code Integration**: Configurable QR code patterns for card verification\n\n## External Dependencies\n\n### Database\n- **Neon Database**: Serverless PostgreSQL for production data storage\n- **Connection**: @neondatabase/serverless driver for database connectivity\n\n### UI Components\n- **Radix UI**: Comprehensive set of unstyled, accessible UI primitives\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Utility for component variant management\n\n### File Processing\n- **Multer**: Middleware for handling multipart/form-data file uploads\n- **File System**: Node.js fs promises for file operations\n\n### Development Tools\n- **Replit Integration**: Custom plugins for Replit environment support\n- **TypeScript**: Static type checking across the entire application\n- **PostCSS**: CSS processing with Tailwind CSS integration\n\n### Fonts & Styling\n- **Google Fonts**: Inter, DM Sans, Fira Code, Geist Mono, and Architects Daughter\n- **Tailwind CSS**: Utility-first CSS framework with custom theme configuration","size_bytes":3752},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import express, { type Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertMemberSchema, insertNgoSettingsSchema, insertCardTemplateSchema } from \"@shared/schema\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\n\nconst upload = multer({\n  storage: multer.diskStorage({\n    destination: async (req, file, cb) => {\n      const uploadDir = path.join(process.cwd(), 'uploads');\n      try {\n        await fs.mkdir(uploadDir, { recursive: true });\n      } catch (error) {\n        console.error('Error creating upload directory:', error);\n      }\n      cb(null, uploadDir);\n    },\n    filename: (req, file, cb) => {\n      const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n      cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n    },\n  }),\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    const allowedTypes = /jpeg|jpg|png|gif/;\n    const extname = allowedTypes.test(path.extname(file.originalname).toLowerCase());\n    const mimetype = allowedTypes.test(file.mimetype);\n\n    if (mimetype && extname) {\n      return cb(null, true);\n    } else {\n      cb(new Error('Only image files are allowed'));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Serve uploaded files\n  app.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));\n\n  // Member routes\n  app.get('/api/members', async (req, res) => {\n    try {\n      const { search } = req.query;\n      let members;\n      \n      if (search && typeof search === 'string') {\n        members = await storage.searchMembers(search);\n      } else {\n        members = await storage.getMembers();\n      }\n      \n      res.json(members);\n    } catch (error) {\n      console.error('Error fetching members:', error);\n      res.status(500).json({ message: 'Failed to fetch members' });\n    }\n  });\n\n  app.get('/api/members/:id', async (req, res) => {\n    try {\n      const member = await storage.getMember(req.params.id);\n      if (!member) {\n        return res.status(404).json({ message: 'Member not found' });\n      }\n      res.json(member);\n    } catch (error) {\n      console.error('Error fetching member:', error);\n      res.status(500).json({ message: 'Failed to fetch member' });\n    }\n  });\n\n  app.post('/api/members', upload.single('photo'), async (req, res) => {\n    try {\n      const memberData = {\n        ...req.body,\n        joiningDate: new Date(req.body.joiningDate),\n        isActive: req.body.isActive === 'true' || req.body.isActive === true,\n      };\n\n      if (req.file) {\n        memberData.photoUrl = `/uploads/${req.file.filename}`;\n      }\n\n      const validatedData = insertMemberSchema.parse(memberData);\n      const member = await storage.createMember(validatedData);\n      res.status(201).json(member);\n    } catch (error) {\n      console.error('Error creating member:', error);\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      res.status(400).json({ message: 'Failed to create member', error: message });\n    }\n  });\n\n  app.patch('/api/members/:id', upload.single('photo'), async (req, res) => {\n    try {\n      const updateData = { ...req.body };\n      \n      if (req.body.joiningDate) {\n        updateData.joiningDate = new Date(req.body.joiningDate);\n      }\n      \n      if (req.body.isActive !== undefined) {\n        updateData.isActive = req.body.isActive === 'true' || req.body.isActive === true;\n      }\n\n      if (req.file) {\n        updateData.photoUrl = `/uploads/${req.file.filename}`;\n      }\n\n      const member = await storage.updateMember(req.params.id, updateData);\n      if (!member) {\n        return res.status(404).json({ message: 'Member not found' });\n      }\n      res.json(member);\n    } catch (error) {\n      console.error('Error updating member:', error);\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      res.status(400).json({ message: 'Failed to update member', error: message });\n    }\n  });\n\n  app.delete('/api/members/:id', async (req, res) => {\n    try {\n      const deleted = await storage.deleteMember(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: 'Member not found' });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting member:', error);\n      res.status(500).json({ message: 'Failed to delete member' });\n    }\n  });\n\n  // NGO Settings routes\n  app.get('/api/settings', async (req, res) => {\n    try {\n      const settings = await storage.getNgoSettings();\n      res.json(settings);\n    } catch (error) {\n      console.error('Error fetching settings:', error);\n      res.status(500).json({ message: 'Failed to fetch settings' });\n    }\n  });\n\n  app.patch('/api/settings', upload.fields([\n    { name: 'logo', maxCount: 1 },\n    { name: 'signature', maxCount: 1 }\n  ]), async (req, res) => {\n    try {\n      const updateData = { ...req.body };\n      \n      if (req.files) {\n        const files = req.files as { [fieldname: string]: Express.Multer.File[] };\n        if (files.logo && files.logo[0]) {\n          updateData.logoUrl = `/uploads/${files.logo[0].filename}`;\n        }\n        if (files.signature && files.signature[0]) {\n          updateData.signatureUrl = `/uploads/${files.signature[0].filename}`;\n        }\n      }\n\n      const validatedData = insertNgoSettingsSchema.parse(updateData);\n      const settings = await storage.updateNgoSettings(validatedData);\n      res.json(settings);\n    } catch (error) {\n      console.error('Error updating settings:', error);\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      res.status(400).json({ message: 'Failed to update settings', error: message });\n    }\n  });\n\n  // Template routes\n  app.get('/api/templates', async (req, res) => {\n    try {\n      const templates = await storage.getTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error('Error fetching templates:', error);\n      res.status(500).json({ message: 'Failed to fetch templates' });\n    }\n  });\n\n  app.post('/api/templates', async (req, res) => {\n    try {\n      const validatedData = insertCardTemplateSchema.parse(req.body);\n      const template = await storage.createTemplate(validatedData);\n      res.status(201).json(template);\n    } catch (error) {\n      console.error('Error creating template:', error);\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      res.status(400).json({ message: 'Failed to create template', error: message });\n    }\n  });\n\n  app.patch('/api/templates/:id', async (req, res) => {\n    try {\n      const template = await storage.updateTemplate(req.params.id, req.body);\n      if (!template) {\n        return res.status(404).json({ message: 'Template not found' });\n      }\n      res.json(template);\n    } catch (error) {\n      console.error('Error updating template:', error);\n      const message = error instanceof Error ? error.message : 'Unknown error';\n      res.status(400).json({ message: 'Failed to update template', error: message });\n    }\n  });\n\n  app.patch('/api/templates/:id/activate', async (req, res) => {\n    try {\n      const success = await storage.setActiveTemplate(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: 'Template not found' });\n      }\n      res.json({ message: 'Template activated successfully' });\n    } catch (error) {\n      console.error('Error activating template:', error);\n      res.status(500).json({ message: 'Failed to activate template' });\n    }\n  });\n\n  app.delete('/api/templates/:id', async (req, res) => {\n    try {\n      const deleted = await storage.deleteTemplate(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: 'Template not found' });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error('Error deleting template:', error);\n      res.status(500).json({ message: 'Failed to delete template' });\n    }\n  });\n\n  // Stats route for dashboard\n  app.get('/api/stats', async (req, res) => {\n    try {\n      const members = await storage.getMembers();\n      const activeMembers = members.filter(m => m.isActive);\n      \n      const stats = {\n        totalMembers: members.length,\n        activeMembers: activeMembers.length,\n        cardsGenerated: Math.floor(members.length * 0.8), // Simulated\n        downloadsToday: Math.floor(Math.random() * 100), // Simulated\n      };\n      \n      res.json(stats);\n    } catch (error) {\n      console.error('Error fetching stats:', error);\n      res.status(500).json({ message: 'Failed to fetch stats' });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":8846},"server/storage.ts":{"content":"import { type Member, type InsertMember, type NgoSettings, type InsertNgoSettings, type CardTemplate, type InsertCardTemplate } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // Member operations\n  getMembers(): Promise<Member[]>;\n  getMember(id: string): Promise<Member | undefined>;\n  createMember(member: InsertMember): Promise<Member>;\n  updateMember(id: string, member: Partial<InsertMember>): Promise<Member | undefined>;\n  deleteMember(id: string): Promise<boolean>;\n  searchMembers(query: string): Promise<Member[]>;\n  \n  // NGO Settings operations\n  getNgoSettings(): Promise<NgoSettings | undefined>;\n  updateNgoSettings(settings: InsertNgoSettings): Promise<NgoSettings>;\n  \n  // Template operations\n  getTemplates(): Promise<CardTemplate[]>;\n  getTemplate(id: string): Promise<CardTemplate | undefined>;\n  createTemplate(template: InsertCardTemplate): Promise<CardTemplate>;\n  updateTemplate(id: string, template: Partial<InsertCardTemplate>): Promise<CardTemplate | undefined>;\n  deleteTemplate(id: string): Promise<boolean>;\n  setActiveTemplate(id: string): Promise<boolean>;\n}\n\nexport class MemStorage implements IStorage {\n  private members: Map<string, Member>;\n  private ngoSettings: NgoSettings | undefined;\n  private templates: Map<string, CardTemplate>;\n  private memberIdCounter: number = 1;\n\n  constructor() {\n    this.members = new Map();\n    this.templates = new Map();\n    this.initializeDefaults();\n  }\n\n  private initializeDefaults() {\n    // Initialize default NGO settings\n    this.ngoSettings = {\n      id: randomUUID(),\n      organizationName: \"Hope Foundation NGO\",\n      phoneNumber: \"(555) 123-4567\",\n      emailAddress: \"info@hopefoundation.org\",\n      address: \"123 Main Street, City, State 12345\",\n      website: \"https://hopefoundation.org\",\n      logoUrl: null,\n      signatureUrl: null,\n      qrCodePattern: \"https://verify.hopefoundation.org/{id}\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n\n    // Initialize default template\n    const defaultTemplate: CardTemplate = {\n      id: randomUUID(),\n      name: \"Blue Professional\",\n      colorScheme: \"blue\",\n      fontStyle: \"Inter\",\n      layoutStyle: \"horizontal\",\n      isActive: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.templates.set(defaultTemplate.id, defaultTemplate);\n  }\n\n  private generateMemberId(): string {\n    const year = new Date().getFullYear();\n    const id = `NGO-${year}-${String(this.memberIdCounter).padStart(3, '0')}`;\n    this.memberIdCounter++;\n    return id;\n  }\n\n  async getMembers(): Promise<Member[]> {\n    return Array.from(this.members.values());\n  }\n\n  async getMember(id: string): Promise<Member | undefined> {\n    return this.members.get(id);\n  }\n\n  async createMember(insertMember: InsertMember): Promise<Member> {\n    const id = randomUUID();\n    const memberId = this.generateMemberId();\n    const member: Member = {\n      ...insertMember,\n      id,\n      memberId,\n      bloodGroup: insertMember.bloodGroup || null,\n      emergencyContactName: insertMember.emergencyContactName || null,\n      emergencyContactNumber: insertMember.emergencyContactNumber || null,\n      photoUrl: insertMember.photoUrl || null,\n      isActive: insertMember.isActive ?? true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.members.set(id, member);\n    return member;\n  }\n\n  async updateMember(id: string, updateData: Partial<InsertMember>): Promise<Member | undefined> {\n    const member = this.members.get(id);\n    if (!member) return undefined;\n\n    const updatedMember: Member = {\n      ...member,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.members.set(id, updatedMember);\n    return updatedMember;\n  }\n\n  async deleteMember(id: string): Promise<boolean> {\n    return this.members.delete(id);\n  }\n\n  async searchMembers(query: string): Promise<Member[]> {\n    const members = Array.from(this.members.values());\n    const lowercaseQuery = query.toLowerCase();\n    \n    return members.filter(member => \n      member.fullName.toLowerCase().includes(lowercaseQuery) ||\n      member.memberId.toLowerCase().includes(lowercaseQuery) ||\n      member.designation.toLowerCase().includes(lowercaseQuery) ||\n      member.contactNumber.includes(query)\n    );\n  }\n\n  async getNgoSettings(): Promise<NgoSettings | undefined> {\n    return this.ngoSettings;\n  }\n\n  async updateNgoSettings(settings: InsertNgoSettings): Promise<NgoSettings> {\n    this.ngoSettings = {\n      ...this.ngoSettings!,\n      ...settings,\n      updatedAt: new Date(),\n    };\n    return this.ngoSettings;\n  }\n\n  async getTemplates(): Promise<CardTemplate[]> {\n    return Array.from(this.templates.values());\n  }\n\n  async getTemplate(id: string): Promise<CardTemplate | undefined> {\n    return this.templates.get(id);\n  }\n\n  async createTemplate(insertTemplate: InsertCardTemplate): Promise<CardTemplate> {\n    const id = randomUUID();\n    const template: CardTemplate = {\n      ...insertTemplate,\n      id,\n      isActive: insertTemplate.isActive ?? false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.templates.set(id, template);\n    return template;\n  }\n\n  async updateTemplate(id: string, updateData: Partial<InsertCardTemplate>): Promise<CardTemplate | undefined> {\n    const template = this.templates.get(id);\n    if (!template) return undefined;\n\n    const updatedTemplate: CardTemplate = {\n      ...template,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.templates.set(id, updatedTemplate);\n    return updatedTemplate;\n  }\n\n  async deleteTemplate(id: string): Promise<boolean> {\n    return this.templates.delete(id);\n  }\n\n  async setActiveTemplate(id: string): Promise<boolean> {\n    const template = this.templates.get(id);\n    if (!template) return false;\n\n    // Deactivate all templates\n    for (const tmpl of this.templates.values()) {\n      tmpl.isActive = false;\n    }\n\n    // Activate the selected template\n    template.isActive = true;\n    template.updatedAt = new Date();\n    return true;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":6126},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const members = pgTable(\"members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fullName: text(\"full_name\").notNull(),\n  memberId: varchar(\"member_id\").notNull().unique(),\n  designation: varchar(\"designation\").notNull(),\n  joiningDate: timestamp(\"joining_date\").notNull(),\n  contactNumber: varchar(\"contact_number\").notNull(),\n  bloodGroup: varchar(\"blood_group\"),\n  emergencyContactName: text(\"emergency_contact_name\"),\n  emergencyContactNumber: varchar(\"emergency_contact_number\"),\n  photoUrl: text(\"photo_url\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const ngoSettings = pgTable(\"ngo_settings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  organizationName: text(\"organization_name\").notNull(),\n  phoneNumber: varchar(\"phone_number\"),\n  emailAddress: varchar(\"email_address\"),\n  address: text(\"address\"),\n  website: varchar(\"website\"),\n  logoUrl: text(\"logo_url\"),\n  signatureUrl: text(\"signature_url\"),\n  qrCodePattern: text(\"qr_code_pattern\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const cardTemplates = pgTable(\"card_templates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  colorScheme: varchar(\"color_scheme\").notNull(),\n  fontStyle: varchar(\"font_style\").notNull(),\n  layoutStyle: varchar(\"layout_style\").notNull(),\n  isActive: boolean(\"is_active\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertMemberSchema = createInsertSchema(members).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNgoSettingsSchema = createInsertSchema(ngoSettings).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCardTemplateSchema = createInsertSchema(cardTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type Member = typeof members.$inferSelect;\nexport type InsertMember = z.infer<typeof insertMemberSchema>;\nexport type NgoSettings = typeof ngoSettings.$inferSelect;\nexport type InsertNgoSettings = z.infer<typeof insertNgoSettingsSchema>;\nexport type CardTemplate = typeof cardTemplates.$inferSelect;\nexport type InsertCardTemplate = z.infer<typeof insertCardTemplateSchema>;\n","size_bytes":2661},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Sidebar from \"@/components/sidebar\";\nimport Header from \"@/components/header\";\nimport Dashboard from \"@/pages/dashboard\";\nimport GenerateCards from \"@/pages/generate-cards\";\nimport Members from \"@/pages/members\";\nimport Settings from \"@/pages/settings\";\nimport Templates from \"@/pages/templates\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/generate\" component={GenerateCards} />\n      <Route path=\"/members\" component={Members} />\n      <Route path=\"/settings\" component={Settings} />\n      <Route path=\"/templates\" component={Templates} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"flex min-h-screen bg-gray-50\">\n          <Sidebar />\n          <div className=\"flex-1 ml-64\">\n            <Header />\n            <main className=\"p-6\">\n              <Router />\n            </main>\n          </div>\n        </div>\n        <Toaster />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1430},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(210, 25%, 7.8431%);\n  --card: hsl(180, 6.6667%, 97.0588%);\n  --card-foreground: hsl(210, 25%, 7.8431%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7.8431%);\n  --primary: hsl(214.3, 83.2%, 56.3%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(159.8, 100%, 36.1%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --accent: hsl(42.0, 92.8%, 56.3%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 1.9608%, 90%);\n  --muted-foreground: hsl(210, 25%, 7.8431%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201.4286, 30.4348%, 90.9804%);\n  --input: hsl(200, 23.0769%, 97.4510%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom styles for the NGO app */\n.card-gradient-blue {\n  background: linear-gradient(135deg, #3b82f6, #1e40af);\n}\n\n.card-gradient-green {\n  background: linear-gradient(135deg, #10b981, #047857);\n}\n\n.card-gradient-red {\n  background: linear-gradient(135deg, #ef4444, #dc2626);\n}\n\n.card-gradient-purple {\n  background: linear-gradient(135deg, #8b5cf6, #7c3aed);\n}\n\n.card-gradient-gray {\n  background: linear-gradient(135deg, #6b7280, #4b5563);\n}\n","size_bytes":3831},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/card-preview.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Member, NgoSettings } from \"@shared/schema\";\nimport { Heart, User, QrCode } from \"lucide-react\";\n\ninterface CardPreviewProps {\n  member: Partial<Member> | null;\n  photoFile?: File | null;\n}\n\nexport default function CardPreview({ member, photoFile }: CardPreviewProps) {\n  const [showBack, setShowBack] = useState(false);\n\n  const { data: settings } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  if (!member) {\n    return (\n      <div className=\"text-center py-12\">\n        <div className=\"relative bg-white rounded-xl shadow-2xl mx-auto overflow-hidden opacity-50\" style={{width: '205px', minHeight: '330px'}}>\n          {/* Complex Geometric Background */}\n          <div className=\"absolute inset-0\">\n            <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-600 via-green-500 to-teal-600\"></div>\n            <div className=\"absolute inset-0\">\n              <svg className=\"absolute inset-0 w-full h-full\" viewBox=\"0 0 205 330\">\n                <defs>\n                  <pattern id=\"diagonalStripesEmpty\" patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\" patternTransform=\"rotate(45)\">\n                    <rect width=\"20\" height=\"20\" fill=\"transparent\"/>\n                    <rect width=\"1\" height=\"20\" fill=\"rgba(255,255,255,0.05)\"/>\n                  </pattern>\n                </defs>\n                <rect width=\"100%\" height=\"100%\" fill=\"rgba(16,185,129,0.9)\"/>\n                <rect width=\"100%\" height=\"100%\" fill=\"url(#diagonalStripesEmpty)\"/>\n                <circle cx=\"190\" cy=\"20\" r=\"25\" fill=\"rgba(255,255,255,0.08)\"/>\n                <polygon points=\"0,80 50,60 30,120\" fill=\"rgba(255,255,255,0.06)\"/>\n              </svg>\n            </div>\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-white/10\"></div>\n          </div>\n\n          {/* Header Section */}\n          <div className=\"relative z-30 p-3 pt-4\">\n            <div className=\"flex items-start justify-between\">\n              <div className=\"relative\">\n                <div className=\"w-12 h-12 rounded-full bg-white/20 backdrop-blur-md p-0.5 shadow-lg\">\n                  <div className=\"w-full h-full rounded-full bg-white/30 backdrop-blur-sm flex items-center justify-center\">\n                    <Heart className=\"h-6 w-6 text-white\" />\n                  </div>\n                </div>\n                <div className=\"absolute -inset-1 rounded-full border border-white/20\"></div>\n                <div className=\"absolute -inset-2 rounded-full border border-white/10\"></div>\n              </div>\n              <div className=\"text-right text-white max-w-[120px]\">\n                <h4 className=\"text-xs font-bold leading-tight mb-1 drop-shadow-md\">Your NGO Name</h4>\n                <div className=\"bg-white/20 backdrop-blur-sm rounded-full px-2 py-0.5\">\n                  <p className=\"text-xs font-semibold tracking-wider\">VOLUNTEER ID</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Member Photo Section */}\n          <div className=\"relative z-20 flex justify-center -mt-2\">\n            <div className=\"relative\">\n              <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-white/30 to-white/10 p-1 backdrop-blur-sm\">\n                <div className=\"w-full h-full rounded-full bg-gradient-to-br from-emerald-200/80 to-green-300/80 p-1\">\n                  <div className=\"w-full h-full rounded-full bg-white overflow-hidden shadow-lg\">\n                    <div className=\"w-full h-full bg-gray-100 flex items-center justify-center\">\n                      <User className=\"h-8 w-8 text-gray-400\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n              <div className=\"absolute -bottom-1 -right-1 w-5 h-5 bg-emerald-400 rounded-full flex items-center justify-center shadow-md\">\n                <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n              </div>\n              <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-white/60 rounded-full\"></div>\n              <div className=\"absolute -bottom-1 -left-2 w-2 h-2 bg-white/40 rounded-full\"></div>\n              <div className=\"absolute -top-2 -right-1 w-2 h-2 bg-white/50 rounded-full\"></div>\n            </div>\n          </div>\n\n          {/* Member Details Card */}\n          <div className=\"relative z-10 mx-3 mt-4 mb-4\">\n            <div className=\"bg-white/95 backdrop-blur-md rounded-xl shadow-lg border border-white/50\">\n              <div className=\"p-3 pb-2 text-center border-b border-gray-100\">\n                <h3 className=\"font-bold text-base text-gray-800 leading-tight mb-1\">Member Name</h3>\n                <div className=\"inline-block bg-gradient-to-r from-emerald-100 to-green-100 px-3 py-1 rounded-full\">\n                  <p className=\"text-emerald-700 font-semibold text-xs uppercase tracking-wide\">Designation</p>\n                </div>\n              </div>\n              <div className=\"px-3 pt-2 pb-1 text-center\">\n                <div className=\"inline-block bg-gradient-to-r from-gray-800 to-gray-900 text-white px-3 py-1 rounded-lg shadow-md\">\n                  <p className=\"text-xs font-mono font-bold tracking-wider\">NGO-YYYY-001</p>\n                </div>\n              </div>\n              <div className=\"p-3 pt-2 space-y-2\">\n                <div className=\"flex justify-between items-center py-1.5 px-2 bg-gray-50 rounded-lg\">\n                  <span className=\"text-xs text-gray-600 font-medium flex items-center\">\n                    <div className=\"w-2 h-2 bg-emerald-500 rounded-full mr-2\"></div>\n                    Joining Date\n                  </span>\n                  <span className=\"text-xs text-gray-800 font-bold\">Jan 2024</span>\n                </div>\n                <div className=\"flex justify-between items-center py-1.5 px-2 bg-emerald-50 rounded-lg\">\n                  <span className=\"text-xs text-emerald-700 font-medium flex items-center\">\n                    <div className=\"w-2 h-2 bg-emerald-600 rounded-full mr-2\"></div>\n                    Contact\n                  </span>\n                  <span className=\"text-xs text-emerald-800 font-bold\">+1 555-0123</span>\n                </div>\n                <div className=\"flex justify-between items-center py-1.5 px-2 bg-red-50 rounded-lg\">\n                  <span className=\"text-xs text-red-700 font-medium flex items-center\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full mr-2\"></div>\n                    Blood Group\n                  </span>\n                  <span className=\"text-xs text-red-800 font-bold\">O+</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom Decorative Elements */}\n          <div className=\"absolute bottom-0 left-0 right-0 h-3\">\n            <div className=\"bg-gradient-to-r from-emerald-700 via-green-600 to-teal-700 h-full\">\n              <div className=\"h-full bg-gradient-to-r from-transparent via-white/10 to-transparent\"></div>\n            </div>\n          </div>\n        </div>\n        <p className=\"text-sm text-gray-500 mt-4\">Fill the form to see preview</p>\n      </div>\n    );\n  }\n\n  const photoUrl = photoFile ? URL.createObjectURL(photoFile) : member.photoUrl;\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Toggle Buttons */}\n      <div className=\"flex space-x-4\">\n        <Button\n          variant={!showBack ? \"default\" : \"outline\"}\n          onClick={() => setShowBack(false)}\n          data-testid=\"show-front\"\n        >\n          Front\n        </Button>\n        <Button\n          variant={showBack ? \"default\" : \"outline\"}\n          onClick={() => setShowBack(true)}\n          data-testid=\"show-back\"\n        >\n          Back\n        </Button>\n      </div>\n\n      {/* Card Front Side */}\n      {!showBack && (\n        <div className=\"relative bg-white rounded-xl shadow-2xl mx-auto overflow-hidden border border-gray-100\" style={{width: '205px', minHeight: '330px'}} data-testid=\"card-front\">\n          {/* Complex Geometric Background */}\n          <div className=\"absolute inset-0\">\n            {/* Base gradient */}\n            <div className=\"absolute inset-0 bg-gradient-to-br from-emerald-600 via-green-500 to-teal-600\"></div>\n            \n            {/* Geometric overlays */}\n            <div className=\"absolute inset-0\">\n              <svg className=\"absolute inset-0 w-full h-full\" viewBox=\"0 0 205 330\">\n                {/* Diagonal stripes */}\n                <defs>\n                  <pattern id=\"diagonalStripes\" patternUnits=\"userSpaceOnUse\" width=\"20\" height=\"20\" patternTransform=\"rotate(45)\">\n                    <rect width=\"20\" height=\"20\" fill=\"transparent\"/>\n                    <rect width=\"1\" height=\"20\" fill=\"rgba(255,255,255,0.05)\"/>\n                  </pattern>\n                  <linearGradient id=\"cardGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                    <stop offset=\"0%\" stopColor=\"rgba(16,185,129,0.9)\"/>\n                    <stop offset=\"50%\" stopColor=\"rgba(5,150,105,0.95)\"/>\n                    <stop offset=\"100%\" stopColor=\"rgba(6,78,59,0.9)\"/>\n                  </linearGradient>\n                </defs>\n                <rect width=\"100%\" height=\"100%\" fill=\"url(#cardGradient)\"/>\n                <rect width=\"100%\" height=\"100%\" fill=\"url(#diagonalStripes)\"/>\n                \n                {/* Decorative geometric shapes */}\n                <circle cx=\"190\" cy=\"20\" r=\"25\" fill=\"rgba(255,255,255,0.08)\"/>\n                <circle cx=\"200\" cy=\"30\" r=\"15\" fill=\"rgba(255,255,255,0.05)\"/>\n                <polygon points=\"0,80 50,60 30,120\" fill=\"rgba(255,255,255,0.06)\"/>\n                <polygon points=\"170,100 205,90 205,130 180,140\" fill=\"rgba(255,255,255,0.04)\"/>\n                <polygon points=\"0,200 40,180 20,240 0,230\" fill=\"rgba(255,255,255,0.05)\"/>\n                \n                {/* Curved elements */}\n                <path d=\"M 0,150 Q 50,120 100,150 T 205,140 L 205,160 Q 150,170 100,160 T 0,170 Z\" fill=\"rgba(255,255,255,0.06)\"/>\n              </svg>\n            </div>\n            \n            {/* Gradient overlay */}\n            <div className=\"absolute inset-0 bg-gradient-to-t from-black/20 via-transparent to-white/10\"></div>\n          </div>\n\n          {/* Header Section with Logo and Org Info */}\n          <div className=\"relative z-30 p-3 pt-4\">\n            <div className=\"flex items-start justify-between\">\n              {/* Logo with decorative frame */}\n              <div className=\"relative\">\n                <div className=\"w-12 h-12 rounded-full bg-white/20 backdrop-blur-md p-0.5 shadow-lg\">\n                  <div className=\"w-full h-full rounded-full bg-white/30 backdrop-blur-sm flex items-center justify-center\">\n                    {settings && settings.logoUrl ? (\n                      <img \n                        src={settings?.logoUrl || ''} \n                        alt=\"NGO Logo\"\n                        className=\"w-8 h-8 object-contain rounded-full\"\n                      />\n                    ) : (\n                      <Heart className=\"h-6 w-6 text-white\" />\n                    )}\n                  </div>\n                </div>\n                {/* Decorative rings */}\n                <div className=\"absolute -inset-1 rounded-full border border-white/20\"></div>\n                <div className=\"absolute -inset-2 rounded-full border border-white/10\"></div>\n              </div>\n              \n              {/* Organization Info */}\n              <div className=\"text-right text-white max-w-[120px]\">\n                <h4 className=\"text-xs font-bold leading-tight mb-1 drop-shadow-md\">\n                  {settings?.organizationName || \"Your NGO Name\"}\n                </h4>\n                <div className=\"bg-white/20 backdrop-blur-sm rounded-full px-2 py-0.5\">\n                  <p className=\"text-xs font-semibold tracking-wider\">VOLUNTEER ID</p>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Member Photo Section with Creative Frame */}\n          <div className=\"relative z-20 flex justify-center -mt-2\">\n            <div className=\"relative\">\n              {/* Outer decorative ring */}\n              <div className=\"w-20 h-20 rounded-full bg-gradient-to-br from-white/30 to-white/10 p-1 backdrop-blur-sm\">\n                {/* Inner decorative ring */}\n                <div className=\"w-full h-full rounded-full bg-gradient-to-br from-emerald-200/80 to-green-300/80 p-1\">\n                  {/* Photo container */}\n                  <div className=\"w-full h-full rounded-full bg-white overflow-hidden shadow-lg\">\n                    {photoUrl ? (\n                      <img \n                        src={photoUrl} \n                        alt=\"Member photo\"\n                        className=\"w-full h-full object-cover\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full bg-gray-100 flex items-center justify-center\">\n                        <User className=\"h-8 w-8 text-gray-400\" />\n                      </div>\n                    )}\n                  </div>\n                </div>\n              </div>\n              \n              {/* Status indicators */}\n              <div className=\"absolute -bottom-1 -right-1 w-5 h-5 bg-emerald-400 rounded-full flex items-center justify-center shadow-md\">\n                <div className=\"w-2 h-2 bg-white rounded-full\"></div>\n              </div>\n              \n              {/* Decorative elements around photo */}\n              <div className=\"absolute -top-1 -left-1 w-3 h-3 bg-white/60 rounded-full\"></div>\n              <div className=\"absolute -bottom-1 -left-2 w-2 h-2 bg-white/40 rounded-full\"></div>\n              <div className=\"absolute -top-2 -right-1 w-2 h-2 bg-white/50 rounded-full\"></div>\n            </div>\n          </div>\n\n          {/* Member Details Card */}\n          <div className=\"relative z-10 mx-3 mt-4 mb-4\">\n            <div className=\"bg-white/95 backdrop-blur-md rounded-xl shadow-lg border border-white/50\">\n              {/* Name and Designation */}\n              <div className=\"p-3 pb-2 text-center border-b border-gray-100\">\n                <h3 className=\"font-bold text-base text-gray-800 leading-tight mb-1\">\n                  {member.fullName || \"Member Name\"}\n                </h3>\n                <div className=\"inline-block bg-gradient-to-r from-emerald-100 to-green-100 px-3 py-1 rounded-full\">\n                  <p className=\"text-emerald-700 font-semibold text-xs uppercase tracking-wide\">\n                    {member.designation || \"Designation\"}\n                  </p>\n                </div>\n              </div>\n              \n              {/* Member ID with decorative styling */}\n              <div className=\"px-3 pt-2 pb-1 text-center\">\n                <div className=\"inline-block bg-gradient-to-r from-gray-800 to-gray-900 text-white px-3 py-1 rounded-lg shadow-md\">\n                  <p className=\"text-xs font-mono font-bold tracking-wider\">\n                    {member.memberId || \"NGO-YYYY-001\"}\n                  </p>\n                </div>\n              </div>\n              \n              {/* Details Grid */}\n              <div className=\"p-3 pt-2 space-y-2\">\n                <div className=\"flex justify-between items-center py-1.5 px-2 bg-gray-50 rounded-lg\">\n                  <span className=\"text-xs text-gray-600 font-medium flex items-center\">\n                    <div className=\"w-2 h-2 bg-emerald-500 rounded-full mr-2\"></div>\n                    Joining Date\n                  </span>\n                  <span className=\"text-xs text-gray-800 font-bold\">\n                    {member.joiningDate \n                      ? new Date(member.joiningDate).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })\n                      : \"Jan 2024\"\n                    }\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center py-1.5 px-2 bg-emerald-50 rounded-lg\">\n                  <span className=\"text-xs text-emerald-700 font-medium flex items-center\">\n                    <div className=\"w-2 h-2 bg-emerald-600 rounded-full mr-2\"></div>\n                    Contact\n                  </span>\n                  <span className=\"text-xs text-emerald-800 font-bold\">\n                    {member.contactNumber || \"+1 555-0123\"}\n                  </span>\n                </div>\n                \n                <div className=\"flex justify-between items-center py-1.5 px-2 bg-red-50 rounded-lg\">\n                  <span className=\"text-xs text-red-700 font-medium flex items-center\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full mr-2\"></div>\n                    Blood Group\n                  </span>\n                  <span className=\"text-xs text-red-800 font-bold\">\n                    {member.bloodGroup || \"O+\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Bottom Decorative Elements */}\n          <div className=\"absolute bottom-0 left-0 right-0 h-3\">\n            <div className=\"bg-gradient-to-r from-emerald-700 via-green-600 to-teal-700 h-full\">\n              <div className=\"h-full bg-gradient-to-r from-transparent via-white/10 to-transparent\"></div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Card Back Side */}\n      {showBack && (\n        <div className=\"relative bg-white rounded-xl shadow-2xl mx-auto overflow-hidden border border-gray-100\" style={{width: '205px', minHeight: '330px'}} data-testid=\"card-back\">\n          {/* Header Section */}\n          <div className=\"bg-gradient-to-r from-emerald-50 to-green-50 p-2 border-b border-emerald-100\">\n            <div className=\"text-center\">\n              <h4 className=\"text-sm font-bold text-gray-800 mb-1\">\n                {settings?.organizationName || \"Your NGO Name\"}\n              </h4>\n              <div className=\"space-y-0.5\">\n                <p className=\"text-xs text-gray-600 flex items-center justify-center gap-1\">\n                  <span className=\"w-1 h-1 bg-emerald-500 rounded-full\"></span>\n                  {settings?.address || \"123 Main Street, City, State 12345\"}\n                </p>\n                <p className=\"text-xs text-gray-600 flex items-center justify-center gap-1\">\n                  <span className=\"w-1 h-1 bg-emerald-500 rounded-full\"></span>\n                  {settings?.phoneNumber || \"(555) 123-4567\"} | {settings?.emailAddress || \"info@yourorg.org\"}\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          {/* Emergency Contact Section */}\n          <div className=\"p-2 border-b border-gray-100\">\n            <div className=\"bg-gray-50 rounded-lg p-2\">\n              <h5 className=\"text-xs font-semibold text-gray-800 mb-2 flex items-center gap-1\">\n                <span className=\"w-1.5 h-1.5 bg-red-500 rounded-full\"></span>\n                Emergency Contact\n              </h5>\n              <div className=\"space-y-1\">\n                <div className=\"flex justify-between text-xs\">\n                  <span className=\"text-gray-600 font-medium\">Name:</span>\n                  <span className=\"text-gray-800 font-semibold text-right flex-1 ml-2\">\n                    {member.emergencyContactName || \"Emergency Contact Name\"}\n                  </span>\n                </div>\n                <div className=\"flex justify-between text-xs\">\n                  <span className=\"text-gray-600 font-medium\">Phone:</span>\n                  <span className=\"text-gray-800 font-semibold\">\n                    {member.emergencyContactNumber || \"+1 555-9876\"}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* QR Code and Instructions */}\n          <div className=\"p-2 border-b border-gray-100\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-12 h-12 bg-gradient-to-br from-emerald-50 to-green-100 border border-emerald-200 rounded flex items-center justify-center\">\n                <QrCode className=\"h-6 w-6 text-emerald-600\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-xs text-gray-700 font-semibold mb-0.5\">\n                  Property of {settings?.organizationName || \"Your NGO\"}\n                </p>\n                <p className=\"text-xs text-gray-600 leading-tight\">\n                  If found, please return to the above address.\n                </p>\n              </div>\n            </div>\n          </div>\n          \n          {/* Signatures Section */}\n          <div className=\"p-2\">\n            <div className=\"flex justify-between gap-2\">\n              <div className=\"flex-1\">\n                <p className=\"text-xs text-gray-600 mb-1 font-medium\">Authorized Signatory</p>\n                <div className=\"w-full h-6 border-b border-dotted border-emerald-300 flex items-end\">\n                  {settings && settings.signatureUrl && (\n                    <img \n                      src={settings?.signatureUrl || ''} \n                      alt=\"Signature\"\n                      className=\"h-full object-contain\"\n                    />\n                  )}\n                </div>\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"text-xs text-gray-600 mb-1 font-medium\">Member Signature</p>\n                <div className=\"w-full h-6 border-b border-dotted border-emerald-300\"></div>\n              </div>\n            </div>\n            <div className=\"mt-2 text-center\">\n              <p className=\"text-xs text-gray-500 italic\">\n                Valid with authorized signature only\n              </p>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":21969},"client/src/components/header.tsx":{"content":"import { Search, Bell, User } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { useLocation } from \"wouter\";\n\nconst pageTitles = {\n  \"/\": \"Dashboard Overview\",\n  \"/generate\": \"Generate Member Cards\",\n  \"/members\": \"Members Database\",\n  \"/settings\": \"Organization Settings\",\n  \"/templates\": \"Card Templates\",\n};\n\nexport default function Header() {\n  const [location] = useLocation();\n  const pageTitle = pageTitles[location as keyof typeof pageTitles] || \"Dashboard\";\n\n  return (\n    <header className=\"bg-white shadow-sm border-b\">\n      <div className=\"px-6 py-4 flex items-center justify-between\">\n        <h2 className=\"text-2xl font-semibold text-gray-800\">{pageTitle}</h2>\n        \n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search members...\"\n              className=\"pl-10 pr-4 w-64\"\n              data-testid=\"search-input\"\n            />\n          </div>\n          \n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"notifications-button\">\n            <Bell className=\"h-5 w-5 text-gray-400\" />\n          </Button>\n          \n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <User className=\"h-4 w-4 text-white\" />\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":1558},"client/src/components/member-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertMemberSchema, Member } from \"@shared/schema\";\nimport { Eye, Download, Camera } from \"lucide-react\";\nimport FileUpload from \"@/components/ui/file-upload\";\nimport { generatePDF } from \"@/lib/pdf-generator\";\n\ninterface MemberFormProps {\n  onPreview: (memberData: Partial<Member>, file?: File) => void;\n}\n\nexport default function MemberForm({ onPreview }: MemberFormProps) {\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm({\n    resolver: zodResolver(insertMemberSchema.extend({\n      emergencyContactName: insertMemberSchema.shape.emergencyContactName.optional(),\n      emergencyContactNumber: insertMemberSchema.shape.emergencyContactNumber.optional(),\n      bloodGroup: insertMemberSchema.shape.bloodGroup.optional(),\n    })),\n    defaultValues: {\n      fullName: \"\",\n      designation: \"\",\n      joiningDate: new Date(),\n      contactNumber: \"\",\n      bloodGroup: \"\",\n      emergencyContactName: \"\",\n      emergencyContactNumber: \"\",\n      isActive: true,\n    },\n  });\n\n  const createMemberMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const formData = new FormData();\n      \n      // Add all form fields\n      Object.keys(data).forEach(key => {\n        if (data[key] !== null && data[key] !== undefined && data[key] !== '') {\n          if (key === 'joiningDate') {\n            formData.append(key, data[key].toISOString());\n          } else {\n            formData.append(key, data[key].toString());\n          }\n        }\n      });\n      \n      // Add photo file\n      if (photoFile) {\n        formData.append('photo', photoFile);\n      }\n\n      const response = await fetch('/api/members', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message || 'Failed to create member');\n      }\n\n      return response.json();\n    },\n    onSuccess: async (member) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      toast({\n        title: \"Success\",\n        description: \"Member created successfully\",\n      });\n      \n      // Generate and download PDF\n      try {\n        await generatePDF(member, photoFile);\n        toast({\n          title: \"PDF Generated\",\n          description: \"ID card PDF downloaded successfully\",\n        });\n      } catch (pdfError) {\n        console.error('PDF generation error:', pdfError);\n        toast({\n          title: \"PDF Generation Failed\",\n          description: \"ID card created but PDF download failed. Please try again.\",\n          variant: \"destructive\",\n        });\n      }\n      \n      // Reset form\n      form.reset();\n      setPhotoFile(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePreview = () => {\n    const formData = form.getValues();\n    const dataWithId = {\n      ...formData,\n      memberId: memberIdValue\n    };\n    onPreview(dataWithId, photoFile || undefined);\n  };\n\n  const onSubmit = (data: any) => {\n    // Add the generated member ID to the form data\n    const memberData = {\n      ...data,\n      memberId: memberIdValue\n    };\n    createMemberMutation.mutate(memberData);\n  };\n\n  const [memberIdValue] = useState(() => {\n    const year = new Date().getFullYear();\n    const random = Math.floor(Math.random() * 1000).toString().padStart(3, '0');\n    return `NGO-${year}-${random}`;\n  });\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Photo Upload */}\n        <div>\n          <label className=\"block text-sm font-medium text-gray-700 mb-2\">Member Photo</label>\n          <FileUpload\n            onFileSelect={setPhotoFile}\n            accept=\"image/*\"\n            className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-primary transition-colors cursor-pointer\"\n            data-testid=\"upload-photo\"\n          >\n            <div className=\"space-y-3\">\n              {photoFile ? (\n                <div className=\"space-y-2\">\n                  <img \n                    src={URL.createObjectURL(photoFile)} \n                    alt=\"Preview\"\n                    className=\"w-20 h-20 object-cover rounded-lg mx-auto\"\n                  />\n                  <p className=\"text-sm text-gray-600\">{photoFile.name}</p>\n                </div>\n              ) : (\n                <>\n                  <Camera className=\"mx-auto h-8 w-8 text-gray-400\" />\n                  <p className=\"text-sm text-gray-600\">Click to upload or drag and drop</p>\n                  <p className=\"text-xs text-gray-500\">PNG, JPG up to 5MB</p>\n                </>\n              )}\n            </div>\n          </FileUpload>\n        </div>\n\n        {/* Basic Information */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"fullName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Full Name *</FormLabel>\n                <FormControl>\n                  <Input {...field} placeholder=\"Enter full name\" data-testid=\"input-full-name\" />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormItem>\n            <FormLabel>Member ID *</FormLabel>\n            <FormControl>\n              <Input \n                value={memberIdValue} \n                placeholder=\"Auto-generated\" \n                readOnly \n                className=\"bg-gray-50\"\n                data-testid=\"input-member-id\"\n              />\n            </FormControl>\n          </FormItem>\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"designation\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Designation/Role *</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-designation\">\n                      <SelectValue placeholder=\"Select role\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"volunteer\">Volunteer</SelectItem>\n                    <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n                    <SelectItem value=\"manager\">Manager</SelectItem>\n                    <SelectItem value=\"executive\">Executive</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"joiningDate\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Date of Joining *</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"date\" \n                    {...field}\n                    value={field.value ? field.value.toISOString().split('T')[0] : ''}\n                    onChange={(e) => field.onChange(new Date(e.target.value))}\n                    data-testid=\"input-joining-date\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"contactNumber\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Contact Number *</FormLabel>\n                <FormControl>\n                  <Input \n                    {...field} \n                    type=\"tel\" \n                    placeholder=\"+1 (555) 123-4567\"\n                    data-testid=\"input-contact\"\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"bloodGroup\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Blood Group</FormLabel>\n                <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                  <FormControl>\n                    <SelectTrigger data-testid=\"select-blood-group\">\n                      <SelectValue placeholder=\"Select blood group\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"A+\">A+</SelectItem>\n                    <SelectItem value=\"A-\">A-</SelectItem>\n                    <SelectItem value=\"B+\">B+</SelectItem>\n                    <SelectItem value=\"B-\">B-</SelectItem>\n                    <SelectItem value=\"AB+\">AB+</SelectItem>\n                    <SelectItem value=\"AB-\">AB-</SelectItem>\n                    <SelectItem value=\"O+\">O+</SelectItem>\n                    <SelectItem value=\"O-\">O-</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {/* Emergency Contact */}\n        <div className=\"border-t pt-6\">\n          <h4 className=\"text-md font-medium text-gray-900 mb-4\">Emergency Contact</h4>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"emergencyContactName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Contact Name</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      placeholder=\"Emergency contact name\"\n                      data-testid=\"input-emergency-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"emergencyContactNumber\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Contact Number</FormLabel>\n                  <FormControl>\n                    <Input \n                      {...field} \n                      type=\"tel\" \n                      placeholder=\"Emergency contact number\"\n                      data-testid=\"input-emergency-contact\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex space-x-4 pt-6\">\n          <Button \n            type=\"button\" \n            variant=\"outline\"\n            onClick={handlePreview}\n            className=\"flex-1\"\n            data-testid=\"preview-card\"\n          >\n            <Eye className=\"mr-2 h-4 w-4\" />\n            Preview Card\n          </Button>\n          <Button \n            type=\"submit\" \n            className=\"flex-1 bg-secondary hover:bg-green-600\"\n            disabled={createMemberMutation.isPending}\n            data-testid=\"generate-pdf\"\n          >\n            <Download className=\"mr-2 h-4 w-4\" />\n            {createMemberMutation.isPending ? \"Generating...\" : \"Generate PDF\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":12211},"client/src/components/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  Users, \n  IdCard, \n  LayoutDashboard, \n  Settings, \n  FileImage,\n  Heart \n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Generate Cards\", href: \"/generate\", icon: IdCard },\n  { name: \"Members\", href: \"/members\", icon: Users },\n  { name: \"Settings\", href: \"/settings\", icon: Settings },\n  { name: \"Card Templates\", href: \"/templates\", icon: FileImage },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <div className=\"fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg\">\n      <div className=\"flex items-center justify-center h-16 bg-primary\">\n        <div className=\"flex items-center space-x-2\">\n          <Heart className=\"h-6 w-6 text-white\" />\n          <h1 className=\"text-white text-xl font-bold\">NGO Admin</h1>\n        </div>\n      </div>\n      \n      <nav className=\"mt-8\">\n        <div className=\"px-4 space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <Link key={item.name} href={item.href}>\n                <div\n                  data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  className={cn(\n                    \"flex items-center px-4 py-2 rounded-lg transition-colors cursor-pointer\",\n                    isActive\n                      ? \"bg-blue-50 text-primary\"\n                      : \"text-gray-700 hover:bg-gray-100\"\n                  )}\n                >\n                  <Icon className=\"mr-3 h-5 w-5\" />\n                  {item.name}\n                </div>\n              </Link>\n            );\n          })}\n        </div>\n      </nav>\n    </div>\n  );\n}\n","size_bytes":1854},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/pdf-generator.ts":{"content":"import { Member } from \"@shared/schema\";\nimport jsPDF from 'jspdf';\nimport html2canvas from 'html2canvas';\n\nexport async function generatePDF(member: Member, photoFile?: File | null) {\n  try {\n    // Get organization settings\n    const settingsResponse = await fetch('/api/settings');\n    const settings = settingsResponse.ok ? await settingsResponse.json() : {};\n    \n    const photoUrl = photoFile ? URL.createObjectURL(photoFile) : member.photoUrl || '';\n    \n    // Create a temporary container for the cards\n    const container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.left = '-9999px';\n    container.style.top = '-9999px';\n    container.style.background = 'white';\n    container.style.padding = '20px';\n    \n    // Card dimensions: 2.051\" x 3.303\" at 300 DPI = 615px x 991px\n    const cardWidth = 615;\n    const cardHeight = 991;\n    \n    container.innerHTML = `\n      <div style=\"display: flex; gap: 20px; flex-direction: column;\">\n        <!-- Front Side -->\n        <div id=\"card-front\" style=\"width: ${cardWidth}px; height: ${cardHeight}px; background: white; border: 3px solid #d1d5db; border-radius: 36px; overflow: hidden; position: relative; box-shadow: 0 36px 108px rgba(0,0,0,0.15); font-family: Arial, sans-serif;\">\n          <!-- Complex Geometric Background -->\n          <div style=\"position: absolute; inset: 0;\">\n            <!-- Base gradient -->\n            <div style=\"position: absolute; inset: 0; background: linear-gradient(to bottom right, #059669, #10b981, #0d9488);\"></div>\n            \n            <!-- Geometric overlays -->\n            <svg style=\"position: absolute; inset: 0; width: 100%; height: 100%;\" viewBox=\"0 0 615 991\">\n              <defs>\n                <pattern id=\"diagonalStripes\" patternUnits=\"userSpaceOnUse\" width=\"60\" height=\"60\" patternTransform=\"rotate(45)\">\n                  <rect width=\"60\" height=\"60\" fill=\"transparent\"/>\n                  <rect width=\"3\" height=\"60\" fill=\"rgba(255,255,255,0.05)\"/>\n                </pattern>\n                <linearGradient id=\"cardGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"100%\">\n                  <stop offset=\"0%\" stop-color=\"rgba(16,185,129,0.9)\"/>\n                  <stop offset=\"50%\" stop-color=\"rgba(5,150,105,0.95)\"/>\n                  <stop offset=\"100%\" stop-color=\"rgba(6,78,59,0.9)\"/>\n                </linearGradient>\n              </defs>\n              <rect width=\"100%\" height=\"100%\" fill=\"url(#cardGradient)\"/>\n              <rect width=\"100%\" height=\"100%\" fill=\"url(#diagonalStripes)\"/>\n              \n              <!-- Decorative geometric shapes -->\n              <circle cx=\"570\" cy=\"60\" r=\"75\" fill=\"rgba(255,255,255,0.08)\"/>\n              <circle cx=\"600\" cy=\"90\" r=\"45\" fill=\"rgba(255,255,255,0.05)\"/>\n              <polygon points=\"0,240 150,180 90,360\" fill=\"rgba(255,255,255,0.06)\"/>\n              <polygon points=\"510,300 615,270 615,390 540,420\" fill=\"rgba(255,255,255,0.04)\"/>\n              <polygon points=\"0,600 120,540 60,720 0,690\" fill=\"rgba(255,255,255,0.05)\"/>\n              \n              <!-- Curved elements -->\n              <path d=\"M 0,450 Q 150,360 300,450 T 615,420 L 615,480 Q 450,510 300,480 T 0,510 Z\" fill=\"rgba(255,255,255,0.06)\"/>\n            </svg>\n            \n            <!-- Gradient overlay -->\n            <div style=\"position: absolute; inset: 0; background: linear-gradient(to top, rgba(0,0,0,0.2), transparent, rgba(255,255,255,0.1));\"></div>\n          </div>\n\n          <!-- Header Section with Logo and Org Info -->\n          <div style=\"position: relative; z-index: 30; padding: 36px; padding-top: 48px;\">\n            <div style=\"display: flex; align-items: flex-start; justify-content: space-between;\">\n              <!-- Logo with decorative frame -->\n              <div style=\"position: relative;\">\n                <div style=\"width: 144px; height: 144px; border-radius: 50%; background: rgba(255, 255, 255, 0.2); backdrop-filter: blur(12px); padding: 6px; box-shadow: 0 24px 72px rgba(0,0,0,0.2);\">\n                  <div style=\"width: 100%; height: 100%; border-radius: 50%; background: rgba(255, 255, 255, 0.3); backdrop-filter: blur(6px); display: flex; align-items: center; justify-content: center;\">\n                    ${settings.logoUrl ? `<img src=\"${settings.logoUrl}\" style=\"width:96px;height:96px;border-radius:50%;object-fit:contain;\">` : '<div style=\"font-size:72px;color:white;\">â™¥</div>'}\n                  </div>\n                </div>\n                <!-- Decorative rings -->\n                <div style=\"position: absolute; inset: -12px; border-radius: 50%; border: 3px solid rgba(255,255,255,0.2);\"></div>\n                <div style=\"position: absolute; inset: -24px; border-radius: 50%; border: 3px solid rgba(255,255,255,0.1);\"></div>\n              </div>\n              \n              <!-- Organization Info -->\n              <div style=\"text-align: right; color: white; max-width: 360px;\">\n                <div style=\"font-size: 36px; font-weight: bold; line-height: 1.2; margin-bottom: 12px; text-shadow: 0 6px 12px rgba(0,0,0,0.3);\">\n                  ${settings.organizationName || 'Your NGO Name'}\n                </div>\n                <div style=\"background: rgba(255, 255, 255, 0.2); backdrop-filter: blur(6px); border-radius: 999px; padding: 12px 24px;\">\n                  <div style=\"font-size: 36px; font-weight: 600; letter-spacing: 0.2em;\">VOLUNTEER ID</div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Member Photo Section with Creative Frame -->\n          <div style=\"position: relative; z-index: 20; display: flex; justify-content: center; margin-top: -24px;\">\n            <div style=\"position: relative;\">\n              <!-- Outer decorative ring -->\n              <div style=\"width: 240px; height: 240px; border-radius: 50%; background: linear-gradient(to bottom right, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0.1)); padding: 12px; backdrop-filter: blur(6px);\">\n                <!-- Inner decorative ring -->\n                <div style=\"width: 100%; height: 100%; border-radius: 50%; background: linear-gradient(to bottom right, rgba(209, 250, 229, 0.8), rgba(167, 243, 208, 0.8)); padding: 12px;\">\n                  <!-- Photo container -->\n                  <div style=\"width: 100%; height: 100%; border-radius: 50%; background: white; overflow: hidden; box-shadow: 0 24px 72px rgba(0,0,0,0.2);\">\n                    ${photoUrl ? `<img src=\"${photoUrl}\" style=\"width:100%;height:100%;object-fit:cover;\">` : '<div style=\"width:100%;height:100%;background:#f3f4f6;display:flex;align-items:center;justify-content:center;color:#9ca3af;font-size:96px;\">Photo</div>'}\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Status indicators -->\n              <div style=\"position: absolute; bottom: -12px; right: -12px; width: 60px; height: 60px; background: #34d399; border-radius: 50%; display: flex; align-items: center; justify-content: center; box-shadow: 0 12px 36px rgba(0,0,0,0.3);\">\n                <div style=\"width: 24px; height: 24px; background: white; border-radius: 50%;\"></div>\n              </div>\n              \n              <!-- Decorative elements around photo -->\n              <div style=\"position: absolute; top: -12px; left: -12px; width: 36px; height: 36px; background: rgba(255, 255, 255, 0.6); border-radius: 50%;\"></div>\n              <div style=\"position: absolute; bottom: -12px; left: -24px; width: 24px; height: 24px; background: rgba(255, 255, 255, 0.4); border-radius: 50%;\"></div>\n              <div style=\"position: absolute; top: -24px; right: -12px; width: 24px; height: 24px; background: rgba(255, 255, 255, 0.5); border-radius: 50%;\"></div>\n            </div>\n          </div>\n\n          <!-- Member Details Card -->\n          <div style=\"position: relative; z-index: 10; margin: 36px; margin-top: 48px; margin-bottom: 48px;\">\n            <div style=\"background: rgba(255, 255, 255, 0.95); backdrop-filter: blur(12px); border-radius: 36px; box-shadow: 0 24px 72px rgba(0,0,0,0.2); border: 3px solid rgba(255, 255, 255, 0.5);\">\n              <!-- Name and Designation -->\n              <div style=\"padding: 36px; padding-bottom: 24px; text-align: center; border-bottom: 3px solid #f3f4f6;\">\n                <div style=\"font-size: 54px; font-weight: bold; color: #1f2937; line-height: 1.2; margin-bottom: 12px;\">\n                  ${member.fullName}\n                </div>\n                <div style=\"display: inline-block; background: linear-gradient(to right, #d1fae5, #a7f3d0); padding: 12px 36px; border-radius: 999px;\">\n                  <div style=\"color: #047857; font-weight: 600; font-size: 36px; text-transform: uppercase; letter-spacing: 0.15em;\">\n                    ${member.designation}\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Member ID with decorative styling -->\n              <div style=\"padding: 36px; padding-top: 24px; padding-bottom: 12px; text-align: center;\">\n                <div style=\"display: inline-block; background: linear-gradient(to right, #1f2937, #111827); color: white; padding: 12px 36px; border-radius: 18px; box-shadow: 0 12px 36px rgba(0,0,0,0.3);\">\n                  <div style=\"font-size: 36px; font-family: 'Courier New', monospace; font-weight: bold; letter-spacing: 0.2em;\">\n                    ${member.memberId}\n                  </div>\n                </div>\n              </div>\n              \n              <!-- Details Grid -->\n              <div style=\"padding: 36px; padding-top: 24px;\">\n                <div style=\"margin-bottom: 24px;\">\n                  <div style=\"display: flex; justify-content: space-between; align-items: center; padding: 18px 24px; background: #f9fafb; border-radius: 18px;\">\n                    <span style=\"font-size: 36px; color: #6b7280; font-weight: 500; display: flex; align-items: center;\">\n                      <div style=\"width: 12px; height: 12px; background: #10b981; border-radius: 50%; margin-right: 24px;\"></div>\n                      Joining Date\n                    </span>\n                    <span style=\"font-size: 36px; color: #1f2937; font-weight: bold;\">\n                      ${new Date(member.joiningDate).toLocaleDateString('en-US', { month: 'short', year: 'numeric' })}\n                    </span>\n                  </div>\n                </div>\n                \n                <div style=\"margin-bottom: 24px;\">\n                  <div style=\"display: flex; justify-content: space-between; align-items: center; padding: 18px 24px; background: #d1fae5; border-radius: 18px;\">\n                    <span style=\"font-size: 36px; color: #047857; font-weight: 500; display: flex; align-items: center;\">\n                      <div style=\"width: 12px; height: 12px; background: #059669; border-radius: 50%; margin-right: 24px;\"></div>\n                      Contact\n                    </span>\n                    <span style=\"font-size: 36px; color: #065f46; font-weight: bold;\">\n                      ${member.contactNumber}\n                    </span>\n                  </div>\n                </div>\n                \n                <div>\n                  <div style=\"display: flex; justify-content: space-between; align-items: center; padding: 18px 24px; background: #fef2f2; border-radius: 18px;\">\n                    <span style=\"font-size: 36px; color: #b91c1c; font-weight: 500; display: flex; align-items: center;\">\n                      <div style=\"width: 12px; height: 12px; background: #ef4444; border-radius: 50%; margin-right: 24px;\"></div>\n                      Blood Group\n                    </span>\n                    <span style=\"font-size: 36px; color: #991b1b; font-weight: bold;\">\n                      ${member.bloodGroup || 'N/A'}\n                    </span>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <!-- Bottom Decorative Elements -->\n          <div style=\"position: absolute; bottom: 0; left: 0; right: 0; height: 36px;\">\n            <div style=\"background: linear-gradient(to right, #047857, #059669, #0d9488); height: 100%;\">\n              <div style=\"height: 100%; background: linear-gradient(to right, transparent, rgba(255,255,255,0.1), transparent);\"></div>\n            </div>\n          </div>\n        </div>\n\n        <!-- Back Side -->\n        <div id=\"card-back\" style=\"width: ${cardWidth}px; height: ${cardHeight}px; background: white; border: 3px solid #d1d5db; border-radius: 24px; overflow: hidden; position: relative; box-shadow: 0 12px 36px rgba(0,0,0,0.15); font-family: Arial, sans-serif; display: flex; flex-direction: column;\">\n          <!-- Header -->\n          <div style=\"background: linear-gradient(to right, #d1fae5, #a7f3d0); padding: 24px; border-bottom: 3px solid #d1fae5; text-align: center;\">\n            <div style=\"font-size: 36px; font-weight: bold; color: #1f2937; margin-bottom: 12px;\">${settings.organizationName || 'Your NGO Name'}</div>\n            <div style=\"font-size: 24px; color: #6b7280; display: flex; align-items: center; justify-content: center; gap: 12px; margin-bottom: 6px;\">\n              <span style=\"width: 12px; height: 12px; background: #10b981; border-radius: 50%;\"></span>\n              <span>${settings.address || '123 Main Street, City, State 12345'}</span>\n            </div>\n            <div style=\"font-size: 24px; color: #6b7280; display: flex; align-items: center; justify-content: center; gap: 12px;\">\n              <span style=\"width: 12px; height: 12px; background: #10b981; border-radius: 50%;\"></span>\n              <span>${settings.phoneNumber || '(555) 123-4567'} | ${settings.emailAddress || 'info@yourorg.org'}</span>\n            </div>\n          </div>\n          \n          ${member.emergencyContactName || member.emergencyContactNumber ? `\n            <!-- Emergency Contact -->\n            <div style=\"padding: 24px; border-bottom: 3px solid #f3f4f6;\">\n              <div style=\"background: #f9fafb; border-radius: 24px; padding: 24px;\">\n                <div style=\"font-size: 30px; font-weight: 600; color: #1f2937; margin-bottom: 24px; display: flex; align-items: center; gap: 12px;\">\n                  <span style=\"width: 18px; height: 18px; background: #ef4444; border-radius: 50%;\"></span>\n                  Emergency Contact\n                </div>\n                ${member.emergencyContactName ? `\n                  <div style=\"display: flex; justify-content: space-between; font-size: 30px; margin-bottom: 12px;\">\n                    <span style=\"color: #6b7280; font-weight: 500;\">Name:</span>\n                    <span style=\"color: #1f2937; font-weight: 600; text-align: right; flex: 1; margin-left: 24px;\">${member.emergencyContactName}</span>\n                  </div>\n                ` : ''}\n                ${member.emergencyContactNumber ? `\n                  <div style=\"display: flex; justify-content: space-between; font-size: 30px;\">\n                    <span style=\"color: #6b7280; font-weight: 500;\">Phone:</span>\n                    <span style=\"color: #1f2937; font-weight: 600;\">${member.emergencyContactNumber}</span>\n                  </div>\n                ` : ''}\n              </div>\n            </div>\n          ` : ''}\n          \n          <!-- QR Section -->\n          <div style=\"padding: 24px; border-bottom: 3px solid #f3f4f6;\">\n            <div style=\"display: flex; align-items: center; gap: 24px;\">\n              <div style=\"width: 144px; height: 144px; background: linear-gradient(to bottom right, #d1fae5, #a7f3d0); border: 6px solid #d1fae5; border-radius: 24px; display: flex; align-items: center; justify-content: center; flex-shrink: 0;\">\n                <div style=\"font-size: 48px; color: #10b981;\">â§ˆ</div>\n              </div>\n              <div style=\"flex: 1;\">\n                <div style=\"font-size: 30px; color: #1f2937; font-weight: 600; margin-bottom: 6px;\">Property of ${settings.organizationName || 'Your NGO'}</div>\n                <div style=\"font-size: 24px; color: #6b7280; line-height: 1.3;\">If found, please return to the above address or contact us immediately.</div>\n              </div>\n            </div>\n          </div>\n          \n          <!-- Signatures -->\n          <div style=\"padding: 24px; margin-top: auto;\">\n            <div style=\"display: flex; justify-content: space-between; gap: 24px;\">\n              <div style=\"flex: 1;\">\n                <div style=\"font-size: 24px; color: #6b7280; font-weight: 500; margin-bottom: 12px;\">Authorized Signatory</div>\n                <div style=\"width: 100%; height: 72px; border-bottom: 6px dotted #10b981; display: flex; align-items: end;\">\n                  ${settings.signatureUrl ? `<img src=\"${settings.signatureUrl}\" style=\"height:100%;object-fit:contain;\">` : ''}\n                </div>\n              </div>\n              <div style=\"flex: 1;\">\n                <div style=\"font-size: 24px; color: #6b7280; font-weight: 500; margin-bottom: 12px;\">Member Signature</div>\n                <div style=\"width: 100%; height: 72px; border-bottom: 6px dotted #10b981;\"></div>\n              </div>\n            </div>\n            <div style=\"margin-top: 24px; text-align: center;\">\n              <div style=\"font-size: 24px; color: #6b7280; font-style: italic;\">Valid with authorized signature only</div>\n            </div>\n          </div>\n        </div>\n      </div>\n    `;\n    \n    document.body.appendChild(container);\n    \n    // Wait for images to load\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Create PDF with exact credit card dimensions\n    const pdf = new jsPDF({\n      orientation: 'portrait',\n      unit: 'in',\n      format: [2.051, 3.303]\n    });\n    \n    // Capture front side\n    const frontCard = container.querySelector('#card-front') as HTMLElement;\n    const frontCanvas = await html2canvas(frontCard, {\n      scale: 2,\n      backgroundColor: '#ffffff',\n      useCORS: true,\n      allowTaint: true\n    });\n    \n    // Add front side to PDF\n    pdf.addImage(\n      frontCanvas.toDataURL('image/png'),\n      'PNG',\n      0,\n      0,\n      2.051,\n      3.303\n    );\n    \n    // Add new page for back side\n    pdf.addPage([2.051, 3.303]);\n    \n    // Capture back side\n    const backCard = container.querySelector('#card-back') as HTMLElement;\n    const backCanvas = await html2canvas(backCard, {\n      scale: 2,\n      backgroundColor: '#ffffff',\n      useCORS: true,\n      allowTaint: true\n    });\n    \n    // Add back side to PDF\n    pdf.addImage(\n      backCanvas.toDataURL('image/png'),\n      'PNG',\n      0,\n      0,\n      2.051,\n      3.303\n    );\n    \n    // Clean up\n    document.body.removeChild(container);\n    \n    // Clean up object URL if created\n    if (photoFile && photoUrl) {\n      URL.revokeObjectURL(photoUrl);\n    }\n    \n    // Download the PDF\n    const fileName = `ID-Card-${member.fullName.replace(/\\s+/g, '-')}-${member.memberId}.pdf`;\n    pdf.save(fileName);\n    \n    console.log('PDF generated successfully');\n    \n  } catch (error) {\n    console.error('Error generating PDF:', error);\n    throw new Error('Failed to generate PDF: ' + error.message);\n  }\n}","size_bytes":19177},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Users, IdCard, Clock, Download, Plus, Edit } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const { data: stats, isLoading: statsLoading } = useQuery({\n    queryKey: [\"/api/stats\"],\n  });\n\n  const { data: members, isLoading: membersLoading } = useQuery({\n    queryKey: [\"/api/members\"],\n  });\n\n  if (statsLoading || membersLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {[...Array(4)].map((_, i) => (\n            <Card key={i} className=\"animate-pulse\">\n              <CardContent className=\"p-6\">\n                <div className=\"h-16 bg-gray-200 rounded\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  const recentMembers = Array.isArray(members) ? members.slice(0, 3) : [];\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Stats Cards */}\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-blue-100 rounded-lg\">\n                <Users className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Total Members</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"total-members\">\n                  {stats?.totalMembers ?? 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-green-100 rounded-lg\">\n                <IdCard className=\"h-6 w-6 text-secondary\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Cards Generated</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"cards-generated\">\n                  {stats?.cardsGenerated ?? 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-yellow-100 rounded-lg\">\n                <Clock className=\"h-6 w-6 text-accent\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Active Members</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"active-members\">\n                  {stats?.activeMembers ?? 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-3 bg-red-100 rounded-lg\">\n                <Download className=\"h-6 w-6 text-red-500\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-gray-600\">Downloads Today</p>\n                <p className=\"text-2xl font-semibold text-gray-900\" data-testid=\"downloads-today\">\n                  {stats?.downloadsToday ?? 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Recent Activity & Quick Actions */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Recent Activity</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {recentMembers.length === 0 ? (\n                <p className=\"text-sm text-gray-500 text-center py-8\">\n                  No recent activity. Add your first member to get started.\n                </p>\n              ) : (\n                recentMembers.map((member: any) => (\n                  <div key={member.id} className=\"flex items-center\" data-testid={`activity-member-${member.id}`}>\n                    <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\n                      <Plus className=\"h-4 w-4 text-primary\" />\n                    </div>\n                    <div className=\"ml-4\">\n                      <p className=\"text-sm font-medium text-gray-900\">\n                        New member added: {member.fullName}\n                      </p>\n                      <p className=\"text-xs text-gray-500\">\n                        {new Date(member.createdAt).toLocaleString()}\n                      </p>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 gap-4\">\n              <Link href=\"/generate\">\n                <Button \n                  className=\"h-auto p-4 bg-primary hover:bg-blue-600 flex flex-col items-center space-y-2\"\n                  data-testid=\"quick-action-generate\"\n                >\n                  <Plus className=\"h-6 w-6\" />\n                  <span className=\"text-sm font-medium\">Generate Card</span>\n                </Button>\n              </Link>\n\n              <Link href=\"/members\">\n                <Button \n                  className=\"h-auto p-4 bg-secondary hover:bg-green-600 flex flex-col items-center space-y-2\"\n                  data-testid=\"quick-action-members\"\n                >\n                  <Users className=\"h-6 w-6\" />\n                  <span className=\"text-sm font-medium\">View Members</span>\n                </Button>\n              </Link>\n\n              <Link href=\"/templates\">\n                <Button \n                  className=\"h-auto p-4 bg-accent hover:bg-yellow-600 flex flex-col items-center space-y-2\"\n                  data-testid=\"quick-action-templates\"\n                >\n                  <Edit className=\"h-6 w-6\" />\n                  <span className=\"text-sm font-medium\">Edit Template</span>\n                </Button>\n              </Link>\n\n              <Link href=\"/settings\">\n                <Button \n                  className=\"h-auto p-4 bg-gray-600 hover:bg-gray-700 flex flex-col items-center space-y-2\"\n                  data-testid=\"quick-action-settings\"\n                >\n                  <Edit className=\"h-6 w-6\" />\n                  <span className=\"text-sm font-medium\">Settings</span>\n                </Button>\n              </Link>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7016},"client/src/pages/generate-cards.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport MemberForm from \"@/components/member-form\";\nimport CardPreview from \"@/components/card-preview\";\nimport { Member } from \"@shared/schema\";\n\nexport default function GenerateCards() {\n  const [previewMember, setPreviewMember] = useState<Partial<Member> | null>(null);\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n\n  const handlePreview = (memberData: Partial<Member>, file?: File) => {\n    setPreviewMember(memberData);\n    if (file) {\n      setPhotoFile(file);\n    }\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n      {/* Member Information Form */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Member Information</CardTitle>\n          <p className=\"text-sm text-gray-600\">Fill in the details to generate ID card</p>\n        </CardHeader>\n        <CardContent>\n          <MemberForm onPreview={handlePreview} />\n        </CardContent>\n      </Card>\n\n      {/* Card Preview */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Card Preview</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <CardPreview member={previewMember} photoFile={photoFile} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1309},"client/src/pages/members.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Member } from \"@shared/schema\";\nimport { Download, Plus, Eye, Edit, Search, Filter, User } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { generatePDF } from \"@/lib/pdf-generator\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\n\nexport default function Members() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: members, isLoading } = useQuery({\n    queryKey: [\"/api/members\", searchQuery],\n    queryFn: async () => {\n      const url = searchQuery \n        ? `/api/members?search=${encodeURIComponent(searchQuery)}`\n        : \"/api/members\";\n      const response = await fetch(url);\n      if (!response.ok) throw new Error('Failed to fetch members');\n      return response.json();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"DELETE\", `/api/members/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/members\"] });\n      toast({\n        title: \"Success\",\n        description: \"Member deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredMembers = members?.filter((member: Member) => {\n    const matchesRole = !roleFilter || roleFilter === \"all\" || member.designation === roleFilter;\n    const matchesStatus = !statusFilter || statusFilter === \"all\" || \n      (statusFilter === \"active\" && member.isActive) ||\n      (statusFilter === \"inactive\" && !member.isActive);\n    \n    return matchesRole && matchesStatus;\n  }) || [];\n\n  const handleDelete = (id: string) => {\n    if (confirm(\"Are you sure you want to delete this member?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleGeneratePDF = async (member: Member) => {\n    try {\n      await generatePDF(member);\n      toast({\n        title: \"Success\",\n        description: \"ID card PDF generated successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate PDF\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  function ViewMemberDialog({ member }: { member: Member }) {\n    return (\n      <Dialog>\n        <DialogTrigger asChild>\n          <Button \n            variant=\"ghost\" \n            size=\"sm\"\n            data-testid={`view-member-${member.id}`}\n          >\n            <Eye className=\"h-4 w-4\" />\n          </Button>\n        </DialogTrigger>\n        <DialogContent className=\"max-w-md\">\n          <DialogHeader>\n            <DialogTitle>Member Details</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"w-16 h-16 bg-gray-200 rounded-full flex items-center justify-center overflow-hidden\">\n                {member.photoUrl ? (\n                  <img \n                    src={member.photoUrl} \n                    alt={member.fullName}\n                    className=\"w-full h-full object-cover\"\n                  />\n                ) : (\n                  <User className=\"h-8 w-8 text-gray-500\" />\n                )}\n              </div>\n              <div>\n                <h3 className=\"font-semibold text-lg\">{member.fullName}</h3>\n                <p className=\"text-sm text-gray-600 capitalize\">{member.designation}</p>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-4 text-sm\">\n              <div>\n                <span className=\"font-medium text-gray-600\">Member ID:</span>\n                <p>{member.memberId}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-600\">Contact:</span>\n                <p>{member.contactNumber}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-600\">Joining Date:</span>\n                <p>{new Date(member.joiningDate).toLocaleDateString()}</p>\n              </div>\n              <div>\n                <span className=\"font-medium text-gray-600\">Status:</span>\n                <Badge variant={member.isActive ? \"default\" : \"secondary\"}>\n                  {member.isActive ? \"Active\" : \"Inactive\"}\n                </Badge>\n              </div>\n              {member.bloodGroup && (\n                <div>\n                  <span className=\"font-medium text-gray-600\">Blood Group:</span>\n                  <p>{member.bloodGroup}</p>\n                </div>\n              )}\n              {member.emergencyContactName && (\n                <div>\n                  <span className=\"font-medium text-gray-600\">Emergency Contact:</span>\n                  <p>{member.emergencyContactName}</p>\n                </div>\n              )}\n              {member.emergencyContactNumber && (\n                <div>\n                  <span className=\"font-medium text-gray-600\">Emergency Phone:</span>\n                  <p>{member.emergencyContactNumber}</p>\n                </div>\n              )}\n            </div>\n            \n            <div className=\"flex space-x-2 pt-4\">\n              <Button \n                onClick={() => handleGeneratePDF(member)} \n                className=\"flex-1\"\n                data-testid=\"download-pdf-from-view\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Download ID Card\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">Loading members...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Members Database</CardTitle>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" data-testid=\"export-members\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export\n            </Button>\n            <Link href=\"/generate\">\n              <Button data-testid=\"add-member\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add Member\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </CardHeader>\n\n      {/* Filters and Search */}\n      <CardContent className=\"border-b border-gray-100 bg-gray-50\">\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search by name or ID...\"\n              className=\"pl-10\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              data-testid=\"search-members\"\n            />\n          </div>\n          \n          <Select value={roleFilter} onValueChange={setRoleFilter}>\n            <SelectTrigger data-testid=\"filter-role\">\n              <SelectValue placeholder=\"All Roles\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Roles</SelectItem>\n              <SelectItem value=\"volunteer\">Volunteer</SelectItem>\n              <SelectItem value=\"coordinator\">Coordinator</SelectItem>\n              <SelectItem value=\"manager\">Manager</SelectItem>\n              <SelectItem value=\"executive\">Executive</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger data-testid=\"filter-status\">\n              <SelectValue placeholder=\"All Status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">All Status</SelectItem>\n              <SelectItem value=\"active\">Active</SelectItem>\n              <SelectItem value=\"inactive\">Inactive</SelectItem>\n            </SelectContent>\n          </Select>\n          \n          <Button variant=\"outline\" className=\"w-full\" data-testid=\"advanced-filters\">\n            <Filter className=\"mr-2 h-4 w-4\" />\n            Advanced Filters\n          </Button>\n        </div>\n      </CardContent>\n\n      {/* Members Table */}\n      <CardContent className=\"p-0\">\n        {filteredMembers.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <User className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No members found</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              {searchQuery || roleFilter || statusFilter \n                ? \"Try adjusting your search or filters.\"\n                : \"Get started by adding your first member.\"\n              }\n            </p>\n            <div className=\"mt-6\">\n              <Link href=\"/generate\">\n                <Button data-testid=\"add-first-member\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Member\n                </Button>\n              </Link>\n            </div>\n          </div>\n        ) : (\n          <div className=\"overflow-x-auto\">\n            <table className=\"w-full\">\n              <thead className=\"bg-gray-50\">\n                <tr>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Member\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    ID\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Role\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Joining Date\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Status\n                  </th>\n                  <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\">\n                    Actions\n                  </th>\n                </tr>\n              </thead>\n              <tbody className=\"bg-white divide-y divide-gray-200\">\n                {filteredMembers.map((member: Member) => (\n                  <tr key={member.id} data-testid={`member-row-${member.id}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <div className=\"w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center overflow-hidden\">\n                          {member.photoUrl ? (\n                            <img \n                              src={member.photoUrl} \n                              alt={member.fullName}\n                              className=\"w-full h-full object-cover\"\n                            />\n                          ) : (\n                            <User className=\"h-5 w-5 text-gray-500\" />\n                          )}\n                        </div>\n                        <div className=\"ml-4\">\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {member.fullName}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {member.contactNumber}\n                          </div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {member.memberId}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge variant=\"secondary\" className=\"capitalize\">\n                        {member.designation}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {new Date(member.joiningDate).toLocaleDateString()}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <Badge variant={member.isActive ? \"default\" : \"secondary\"}>\n                        {member.isActive ? \"Active\" : \"Inactive\"}\n                      </Badge>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm font-medium\">\n                      <div className=\"flex space-x-2\">\n                        <ViewMemberDialog member={member} />\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleGeneratePDF(member)}\n                          data-testid={`download-card-${member.id}`}\n                        >\n                          <Download className=\"h-4 w-4\" />\n                        </Button>\n                        <Button \n                          variant=\"ghost\" \n                          size=\"sm\"\n                          onClick={() => handleDelete(member.id)}\n                          data-testid={`delete-member-${member.id}`}\n                        >\n                          <Edit className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":14457},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/settings.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { insertNgoSettingsSchema } from \"@shared/schema\";\nimport { Heart, Upload, QrCode, FileSignature } from \"lucide-react\";\nimport FileUpload from \"@/components/ui/file-upload\";\n\nexport default function Settings() {\n  const [logoFile, setLogoFile] = useState<File | null>(null);\n  const [signatureFile, setSignatureFile] = useState<File | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: settings, isLoading } = useQuery({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const form = useForm({\n    resolver: zodResolver(insertNgoSettingsSchema),\n    defaultValues: {\n      organizationName: \"\",\n      phoneNumber: \"\",\n      emailAddress: \"\",\n      address: \"\",\n      website: \"\",\n      qrCodePattern: \"\",\n    },\n  });\n\n  // Update form when settings are loaded\n  React.useEffect(() => {\n    if (settings) {\n      form.reset({\n        organizationName: (settings as any).organizationName || \"\",\n        phoneNumber: (settings as any).phoneNumber || \"\",\n        emailAddress: (settings as any).emailAddress || \"\",\n        address: (settings as any).address || \"\",\n        website: (settings as any).website || \"\",\n        qrCodePattern: (settings as any).qrCodePattern || \"\",\n      });\n    }\n  }, [settings, form]);\n\n  const updateMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const formData = new FormData();\n      \n      // Add form fields\n      Object.keys(data).forEach(key => {\n        if (data[key]) {\n          formData.append(key, data[key]);\n        }\n      });\n      \n      // Add files\n      if (logoFile) {\n        formData.append('logo', logoFile);\n      }\n      if (signatureFile) {\n        formData.append('signature', signatureFile);\n      }\n\n      const response = await fetch('/api/settings', {\n        method: 'PATCH',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to update settings');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"Success\",\n        description: \"Settings updated successfully\",\n      });\n      setLogoFile(null);\n      setSignatureFile(null);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: any) => {\n    updateMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardContent className=\"p-8\">\n              <div className=\"animate-pulse space-y-4\">\n                <div className=\"h-4 bg-gray-200 rounded w-1/4\"></div>\n                <div className=\"h-10 bg-gray-200 rounded\"></div>\n                <div className=\"h-10 bg-gray-200 rounded\"></div>\n                <div className=\"h-20 bg-gray-200 rounded\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n      {/* NGO Information */}\n      <div className=\"lg:col-span-2\">\n        <Card>\n          <CardHeader>\n            <CardTitle>NGO Information</CardTitle>\n            <p className=\"text-sm text-gray-600\">Update your organization details</p>\n          </CardHeader>\n          <CardContent>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n                <FormField\n                  control={form.control}\n                  name=\"organizationName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Organization Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-organization-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"phoneNumber\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Phone Number</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-phone\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"emailAddress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Email Address</FormLabel>\n                        <FormControl>\n                          <Input type=\"email\" {...field} data-testid=\"input-email\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"address\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Address</FormLabel>\n                      <FormControl>\n                        <Textarea {...field} rows={3} data-testid=\"input-address\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"website\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Website</FormLabel>\n                      <FormControl>\n                        <Input type=\"url\" {...field} data-testid=\"input-website\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"qrCodePattern\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>QR Code URL Pattern</FormLabel>\n                      <FormControl>\n                        <Input \n                          {...field} \n                          placeholder=\"https://verify.yourorg.com/{id}\"\n                          data-testid=\"input-qr-pattern\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <Button \n                  type=\"submit\" \n                  className=\"w-full\"\n                  disabled={updateMutation.isPending}\n                  data-testid=\"submit-settings\"\n                >\n                  {updateMutation.isPending ? \"Updating...\" : \"Update Information\"}\n                </Button>\n              </form>\n            </Form>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Assets Management */}\n      <div className=\"space-y-6\">\n        {/* Logo Upload */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Organization Logo</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {(settings as any)?.logoUrl && (\n                <div className=\"flex justify-center\">\n                  <img \n                    src={(settings as any).logoUrl} \n                    alt=\"Current logo\"\n                    className=\"w-16 h-16 object-contain rounded\"\n                  />\n                </div>\n              )}\n              \n              <FileUpload\n                onFileSelect={setLogoFile}\n                accept=\"image/*\"\n                className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-primary transition-colors cursor-pointer\"\n                data-testid=\"upload-logo\"\n              >\n                <div className=\"space-y-2\">\n                  <Heart className=\"mx-auto h-8 w-8 text-gray-400\" />\n                  <p className=\"text-sm text-gray-600\">\n                    {logoFile ? logoFile.name : \"Click to upload logo\"}\n                  </p>\n                </div>\n              </FileUpload>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* QR Code Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle>QR Code Settings</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-gray-600\">\n                QR Code pattern is configured in the main form. Each member card will generate a unique QR code.\n              </p>\n              \n              <Button variant=\"secondary\" className=\"w-full\" data-testid=\"test-qr\">\n                <QrCode className=\"mr-2 h-4 w-4\" />\n                Test QR Code\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Signature Upload */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Authorized Signature</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {(settings as any)?.signatureUrl && (\n                <div className=\"flex justify-center\">\n                  <img \n                    src={(settings as any).signatureUrl} \n                    alt=\"Current signature\"\n                    className=\"max-w-24 h-12 object-contain\"\n                  />\n                </div>\n              )}\n              \n              <FileUpload\n                onFileSelect={setSignatureFile}\n                accept=\"image/*\"\n                className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-primary transition-colors cursor-pointer\"\n                data-testid=\"upload-signature\"\n              >\n                <div className=\"space-y-2\">\n                  <FileSignature className=\"mx-auto h-6 w-6 text-gray-400\" />\n                  <p className=\"text-sm text-gray-600\">\n                    {signatureFile ? signatureFile.name : \"Upload Signature\"}\n                  </p>\n                  <p className=\"text-xs text-gray-500\">PNG or JPG format</p>\n                </div>\n              </FileUpload>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11302},"client/src/pages/templates.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { CardTemplate } from \"@shared/schema\";\n\nconst colorSchemes = [\n  { value: \"blue\", label: \"Blue Professional\", gradient: \"from-blue-600 to-blue-800\" },\n  { value: \"green\", label: \"Green Nature\", gradient: \"from-green-600 to-green-800\" },\n  { value: \"red\", label: \"Red Energy\", gradient: \"from-red-600 to-red-800\" },\n  { value: \"purple\", label: \"Purple Creative\", gradient: \"from-purple-600 to-purple-800\" },\n  { value: \"gray\", label: \"Clean Minimal\", gradient: \"from-gray-600 to-gray-800\" },\n];\n\nconst fontStyles = [\"Inter\", \"Roboto\", \"Open Sans\", \"Lato\", \"Montserrat\"];\nconst layoutStyles = [\"horizontal\", \"vertical\"];\n\nexport default function Templates() {\n  const [customColorScheme, setCustomColorScheme] = useState(\"blue\");\n  const [customFontStyle, setCustomFontStyle] = useState(\"Inter\");\n  const [customLayoutStyle, setCustomLayoutStyle] = useState(\"horizontal\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: templates, isLoading } = useQuery({\n    queryKey: [\"/api/templates\"],\n  });\n\n  const activateTemplateMutation = useMutation({\n    mutationFn: async (id: string) => {\n      await apiRequest(\"PATCH\", `/api/templates/${id}/activate`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Template activated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveTemplateMutation = useMutation({\n    mutationFn: async (templateData: any) => {\n      await apiRequest(\"POST\", \"/api/templates\", templateData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/templates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Custom template saved successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleActivateTemplate = (id: string) => {\n    activateTemplateMutation.mutate(id);\n  };\n\n  const handleSaveCustomTemplate = () => {\n    const customTemplate = {\n      name: `Custom ${colorSchemes.find(c => c.value === customColorScheme)?.label}`,\n      colorScheme: customColorScheme,\n      fontStyle: customFontStyle,\n      layoutStyle: customLayoutStyle,\n      isActive: false,\n    };\n    \n    saveTemplateMutation.mutate(customTemplate);\n  };\n\n  const getGradientClass = (colorScheme: string) => {\n    const scheme = colorSchemes.find(c => c.value === colorScheme);\n    return scheme?.gradient || \"from-blue-600 to-blue-800\";\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-8\">\n          <div className=\"text-center\">Loading templates...</div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Card Templates</CardTitle>\n        <p className=\"text-sm text-gray-600\">Customize your ID card design</p>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-8\">\n          {/* Predefined Templates */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Available Templates</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n              {Array.isArray(templates) ? templates.map((template: CardTemplate) => (\n                <div \n                  key={template.id} \n                  className=\"border border-gray-200 rounded-lg p-4 hover:shadow-md transition-shadow\"\n                  data-testid={`template-${template.id}`}\n                >\n                  {/* Template Preview */}\n                  <div className={`bg-gradient-to-br ${getGradientClass(template.colorScheme)} rounded-lg p-4 text-white text-xs mb-4 transform scale-75`}>\n                    <div className=\"flex justify-between items-center mb-2\">\n                      <div className=\"w-6 h-6 bg-white rounded-full\"></div>\n                      <div>NGO Name</div>\n                    </div>\n                    <div className=\"flex items-center\">\n                      <div className=\"w-12 h-12 bg-gray-300 rounded mr-3\"></div>\n                      <div>\n                        <div className=\"font-semibold\">Member Name</div>\n                        <div className=\"text-xs opacity-75\">Role | ID</div>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"text-center\">\n                    <div className=\"flex items-center justify-between mb-2\">\n                      <h4 className=\"font-medium text-gray-900\">{template.name}</h4>\n                      {template.isActive && (\n                        <Badge variant=\"default\">Active</Badge>\n                      )}\n                    </div>\n                    <p className=\"text-sm text-gray-600 mb-3\">\n                      {colorSchemes.find(c => c.value === template.colorScheme)?.label || template.colorScheme}\n                    </p>\n                    <Button \n                      onClick={() => handleActivateTemplate(template.id)}\n                      disabled={template.isActive || activateTemplateMutation.isPending}\n                      className={`w-full ${\n                        template.colorScheme === 'green' ? 'bg-secondary hover:bg-green-600' :\n                        template.colorScheme === 'gray' ? 'bg-gray-600 hover:bg-gray-700' :\n                        'bg-primary hover:bg-blue-600'\n                      }`}\n                      data-testid={`activate-template-${template.id}`}\n                    >\n                      {template.isActive ? \"Active\" : \"Use Template\"}\n                    </Button>\n                  </div>\n                </div>\n              )) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  Loading templates...\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Custom Template Editor */}\n          <div className=\"border-t pt-8\">\n            <h3 className=\"text-lg font-semibold mb-4\">Customize Template</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Color Scheme</label>\n                  <div className=\"flex space-x-3\">\n                    {colorSchemes.map((scheme) => (\n                      <div\n                        key={scheme.value}\n                        className={`w-8 h-8 bg-gradient-to-br ${scheme.gradient} rounded cursor-pointer border-2 ${\n                          customColorScheme === scheme.value ? 'border-gray-800' : 'border-transparent hover:border-gray-400'\n                        }`}\n                        onClick={() => setCustomColorScheme(scheme.value)}\n                        data-testid={`color-${scheme.value}`}\n                      />\n                    ))}\n                  </div>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Font Style</label>\n                  <Select value={customFontStyle} onValueChange={setCustomFontStyle}>\n                    <SelectTrigger data-testid=\"select-font\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {fontStyles.map((font) => (\n                        <SelectItem key={font} value={font}>{font}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">Layout Style</label>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    {layoutStyles.map((layout) => (\n                      <Button\n                        key={layout}\n                        variant={customLayoutStyle === layout ? \"default\" : \"outline\"}\n                        className=\"capitalize\"\n                        onClick={() => setCustomLayoutStyle(layout)}\n                        data-testid={`layout-${layout}`}\n                      >\n                        {layout}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"flex items-center justify-center\">\n                <div className={`bg-gradient-to-br ${getGradientClass(customColorScheme)} rounded-lg p-6 text-white shadow-lg max-w-xs`}>\n                  <div className=\"text-center mb-4\">\n                    <h4 className=\"text-sm font-bold\">Live Preview</h4>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <div className=\"w-16 h-16 bg-gray-300 rounded mr-3\"></div>\n                    <div>\n                      <div className=\"font-semibold\" style={{ fontFamily: customFontStyle }}>\n                        Sample Name\n                      </div>\n                      <div className=\"text-xs opacity-75\">Volunteer</div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"mt-6 flex space-x-4\">\n              <Button \n                onClick={handleSaveCustomTemplate}\n                disabled={saveTemplateMutation.isPending}\n                data-testid=\"save-template\"\n              >\n                {saveTemplateMutation.isPending ? \"Saving...\" : \"Save Template\"}\n              </Button>\n              <Button \n                variant=\"outline\"\n                onClick={() => {\n                  setCustomColorScheme(\"blue\");\n                  setCustomFontStyle(\"Inter\");\n                  setCustomLayoutStyle(\"horizontal\");\n                }}\n                data-testid=\"reset-template\"\n              >\n                Reset to Default\n              </Button>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":10754},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/file-upload.tsx":{"content":"import React, { useRef } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface FileUploadProps {\n  onFileSelect: (file: File | null) => void;\n  accept?: string;\n  className?: string;\n  children: React.ReactNode;\n  'data-testid'?: string;\n}\n\nexport default function FileUpload({ \n  onFileSelect, \n  accept = \"*\", \n  className, \n  children,\n  'data-testid': testId \n}: FileUploadProps) {\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const handleClick = () => {\n    fileInputRef.current?.click();\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const file = e.target.files?.[0] || null;\n    onFileSelect(file);\n  };\n\n  const handleDragOver = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDragEnter = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDragLeave = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    \n    const files = e.dataTransfer.files;\n    if (files && files.length > 0) {\n      onFileSelect(files[0]);\n    }\n  };\n\n  return (\n    <div\n      className={cn(\n        \"cursor-pointer transition-colors\",\n        className\n      )}\n      onClick={handleClick}\n      onDragOver={handleDragOver}\n      onDragEnter={handleDragEnter}\n      onDragLeave={handleDragLeave}\n      onDrop={handleDrop}\n      data-testid={testId}\n    >\n      {children}\n      <input\n        ref={fileInputRef}\n        type=\"file\"\n        className=\"hidden\"\n        accept={accept}\n        onChange={handleFileChange}\n      />\n    </div>\n  );\n}\n","size_bytes":1703},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}